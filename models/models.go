package models

import (
	"errors"
	"fmt"
	"net/url"
	"strings"
)

// VideoID represents a video ID.
type VideoID interface {
	// GetID returns the video ID.
	GetID() (string, error)
}

type videoID struct {
	id  string
	url string
}

// GetID returns the video ID.
func (vid *videoID) GetID() (string, error) {
	if vid == nil {
		return "", errors.New("video ID is nil")
	}

	if vid.id != "" {
		return vid.id, nil
	}

	if vid.url != "" {
		var err error
		vid.id, err = vid.extractVideoID(vid.url)
		return vid.id, err
	}

	return "", errors.New("video ID not found")
}

// extractVideoID is the core logic for parsing the video ID from a URL.
// It is kept unexported for internal use within this package.
func (vid *videoID) extractVideoID(videoURL string) (string, error) {
	parsedURL, err := url.Parse(videoURL)
	if err != nil {
		return "", fmt.Errorf("invalid URL format: %w", err)
	}

	// shortlink (e.g., youtu.be/VIDEO_ID)
	if parsedURL.Host == "youtu.be" {
		path := strings.Trim(parsedURL.Path, "/")
		if path != "" {
			return path, nil
		}
	}

	// longlink (e.g., youtube.com/watch?v=VIDEO_ID)
	if parsedURL.Host == "www.youtube.com" || parsedURL.Host == "youtube.com" {
		// Check for standard long link first
		if videoID := parsedURL.Query().Get("v"); videoID != "" {
			return videoID, nil
		}

		// Check for YouTube Shorts (e.g., youtube.com/shorts/VIDEO_ID)
		if strings.HasPrefix(parsedURL.Path, "/shorts/") {
			// Path will be like /shorts/VIDEO_ID. Split it and get the second part.
			parts := strings.Split(strings.Trim(parsedURL.Path, "/"), "/")
			if len(parts) > 1 && parts[1] != "" {
				return parts[1], nil
			}
		}
	}

	return "", errors.New("could not extract video ID from URL")
}

// NewVideoID creates a new video ID.
func NewVideoID(id string) videoID {
	return videoID{
		id: id,
	}
}

// NewVideoIDFromURL creates a new video ID from a URL.
func NewVideoIDFromURL(url string) videoID {
	return videoID{
		url: url,
	}
}

// Caption represents a transcript for a specific language
// it contains a list of timedTexts
type Caption struct {
	Language        string
	IsAutoGenerated bool
	TimedTexts      []TimedText
}

// TimedText a single line of the transcript
// along with it's associated start and end timestamps
type TimedText struct {
	Start TimeStamp
	End   TimeStamp
	Text  string
}

// TimeStamp is expressed in milliseconds
type TimeStamp struct {
	Milliseconds int64
	HMS          string
}
